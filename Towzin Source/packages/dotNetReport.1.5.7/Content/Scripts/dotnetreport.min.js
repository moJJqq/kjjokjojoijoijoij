/// .Net Report Builder view model v3.2
/// License has to be purchased for use
/// 2015-2017 (c) www.dotnetreport.com

function pagerViewModel(a) { a = a || {}; var b = this; b.pageSize = ko.observable(a.pageSize || 30), b.pages = ko.observable(a.pages || 1), b.currentPage = ko.observable(a.currentPage || 1), b.pauseNavigation = ko.observable(!1), b.totalRecords = ko.observable(0), b.sortColumn = ko.observable(), b.sortDescending = ko.observable(), b.isFirstPage = ko.computed(function () { return 1 == this.currentPage() }, b), b.isLastPage = ko.computed(function () { var a = this; return a.currentPage() == a.pages() }, b), b.currentPage.subscribe(function (a) { a > b.pages() && b.currentPage(0 == b.pages() ? 1 : b.pages()), a < 1 && b.currentPage(1) }), b.previous = function () { b.pauseNavigation() || b.isFirstPage() || isNaN(b.currentPage()) || b.currentPage(Number(b.currentPage()) - 1) }, b.next = function () { b.pauseNavigation() || b.isLastPage() || isNaN(b.currentPage()) || b.currentPage(Number(b.currentPage()) + 1) }, b.first = function () { b.pauseNavigation() || b.currentPage(1) }, b.last = function () { b.pauseNavigation() || b.currentPage(b.pages()) }, b.changeSort = function (a) { b.sortColumn() == a ? b.sortDescending(!b.sortDescending()) : b.sortDescending(!1), b.sortColumn(a), 1 != b.currentPage() && b.currentPage(1) } } var reportViewModel = function (a) { var b = this; a = a || {}, b.ReportName = ko.observable(), b.ReportType = ko.observable("List"), b.ReportDescription = ko.observable(), b.FolderID = ko.observable(), b.ReportID = ko.observable(), b.Tables = ko.observableArray([]), b.SelectedTable = ko.observable(), b.ChooseFields = ko.observableArray([]), b.ChosenFields = ko.observableArray([]), b.SelectedFields = ko.observableArray([]), b.SelectFields = ko.observableArray([]), b.SelectedField = ko.observable(), b.IncludeSubTotal = ko.observable(!1), b.AggregateReport = ko.observable(!1), b.SortByField = ko.observable(), b.Filters = ko.observableArray([]), b.SaveReport = ko.observable(!0), b.ShowDataWithGraph = ko.observable(!0), b.ShowOnDashboard = ko.observable(!1), b.ReportMode = ko.observable(a.reportMode || "start"), b.Folders = ko.observableArray(), b.SavedReports = ko.observableArray([]), b.SelectedFolder = ko.observable(null), b.CanSaveReports = ko.observable(!0), b.CanManageFolders = ko.observable(!0), b.ReportResult = ko.observable({ HasError: ko.observable(!1), ReportDebug: ko.observable(!1), Exception: ko.observable(), Warnings: ko.observable(), ReportSql: ko.observable(), ReportData: ko.observable(null) }), b.pager = new pagerViewModel, b.currentSql = ko.observable(), b.currentConnectKey = ko.observable(), b.pager.currentPage.subscribe(function () { b.ExecuteReportQuery(b.currentSql(), b.currentConnectKey()) }), b.createNewReport = function () { b.clearReport(), b.ReportMode("generate") }, b.ReportType.subscribe(function (a) { "List" == a ? b.AggregateReport(!1) : b.AggregateReport(!0) }), b.setReportType = function (a) { b.ReportType(a) }, b.cancelCreateReport = function () { bootbox.confirm("Are you sure you would like to cancel editing this Report?", function (c) { c && (b.clearReport(), a.reportWizard.modal("hide"), b.ReportMode("start")) }) }, b.FlyFilters = ko.computed(function () { return $.grep(b.Filters(), function (a) { return a.IsFilterOnFly }) }), b.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { b.ManageFolder.IsNew(!0), b.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { return null == b.SelectedFolder() ? void toastr.error("Please choose a folder first") : 0 == b.SelectedFolder().Id ? void toastr.error("Cannot edit Default folder") : (b.ManageFolder.IsNew(!1), b.ManageFolder.FolderName(b.SelectedFolder().FolderName), void $("#folderModal").modal("show")) }, saveFolder: function () { if ("" == b.ManageFolder.FolderName()) return void toastr.error("Please enter a Folder Name"); var c = b.ManageFolder.IsNew() ? 0 : b.SelectedFolder().Id; if (0 != $.grep(b.Folders(), function (a) { return a.FolderName.toLowerCase() == b.ManageFolder.FolderName().toLowerCase() && (0 == c || 0 != c && a.Id != c) }).length) return toastr.error("Folder name is already in use, please choose a different Folder Name"), !1; ajaxcall({ url: a.apiUrl + "/ReportApi/SaveFolder", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, folderId: c, folderName: b.ManageFolder.FolderName() } }).success(function (a) { if (b.ManageFolder.IsNew()) b.Folders.push({ Id: a, FolderName: b.ManageFolder.FolderName() }); else { var c = b.SelectedFolder(); b.Folders.remove(b.SelectedFolder()), c.FolderName = b.ManageFolder.FolderName(), b.Folders.push(c) } $("#folderModal").modal("hide") }) }, deleteFolder: function () { return null == b.SelectedFolder() ? void toastr.error("Please choose a folder first") : 0 == b.SelectedFolder().Id ? void toastr.error("Cannot delete Default folder") : void bootbox.confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports and this action cannot be undone.", function (c) { c && ajaxcall({ url: a.apiUrl + "/ReportApi/DeleteFolder", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, folderId: b.SelectedFolder().Id } }).success(function () { b.Folders.remove(b.SelectedFolder()), b.SelectedFolder(null) }) }) } }, b.reportsInFolder = ko.computed(function () { return null == b.SelectedFolder() ? [] : $.grep(b.SavedReports(), function (a) { return a.folderId == b.SelectedFolder().Id }) }), b.clearReport = function () { b.ReportName(""), b.ReportDescription(""), b.ReportType("List"), b.FolderID(null == b.SelectedFolder() ? 0 : b.SelectedFolder().Id), b.ChosenFields([]), b.SelectedFields([]), b.SelectFields([]), b.SelectedField(null), b.IncludeSubTotal(!1), b.AggregateReport(!1), b.SortByField(null), b.Filters([]), b.ReportID(0), b.SaveReport(b.CanSaveReports()) }, b.SelectedTable.subscribe(function (c) { if (null == c) return void b.ChooseFields([]); ajaxcall({ url: a.apiUrl + "/ReportApi/GetFields", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, tableId: c.tableId } }).success(function (a) { var d = $.map(a, function (a) { var d = $.grep(b.SelectedFields(), function (b) { return b.fieldId == a.fieldId }); return d.length > 0 ? d[0] : (a.selectedFieldName = c.tableName + " > " + a.fieldName, a.selectedAggregate = ko.observable(), a.filterOnFly = ko.observable(!1), a) }); b.ChooseFields(d) }) }), b.MoveChosenFields = function () { $.each(b.ChosenFields(), function (a, c) { $.grep(b.SelectedFields(), function (a) { return a.fieldId == c.fieldId }).length > 0 ? toastr.error(c.fieldName + " is already Selected") : b.SelectedFields.push(c) }) }, b.MoveAllFields = function () { $.each(b.ChooseFields(), function (a, c) { 0 === $.grep(b.SelectedFields(), function (a) { return a.fieldId == c.fieldId }).length && b.SelectedFields.push(c) }) }, b.RemoveSelectedFields = function () { $.each(b.ChooseFields(), function (a, c) { b.SelectedFields.remove(c) }) }, b.isFieldValidForYAxis = function (a, c) { return !(a > 0 && "Bar" == b.ReportType() && ["Int", "Double", "Money"].indexOf(c) < 0) }, b.isChart = ko.computed(function () { return ["List", "Summary"].indexOf(b.ReportType()) < 0 }), b.canDrilldown = ko.computed(function () { return ["List"].indexOf(b.ReportType()) < 0 }), b.canMoveUp = function () { return 1 == b.SelectFields().length && b.SelectedFields.indexOf(b.SelectFields()[0]) >= 1 }, b.canMoveDown = function () { return 1 == b.SelectFields().length && b.SelectedFields.indexOf(b.SelectFields()[0]) < b.SelectedFields().length - 1 }, b.MoveUp = function () { if (b.canMoveUp()) { var a = b.SelectFields()[0], c = b.SelectedFields.indexOf(a); if (c >= 1) { var d = b.SelectedFields(); b.SelectedFields.splice(c - 1, 2, d[c], d[c - 1]) } } }, b.MoveDown = function () { if (b.canMoveDown()) { var a = b.SelectFields()[0], c = b.SelectedFields.indexOf(a), d = b.SelectedFields(); c < d.length - 1 && b.SelectedFields.splice(c, 2, d[c + 1], d[c]) } }, b.AddFilter = function (c, d) { c = c || {}; var e = ko.observableArray([]); c.Value1 && e.push({ id: c.Value1, text: c.Value1 }), c.Value2 && e.push({ id: c.Value2, text: c.Value2 }); var f = ko.observable(); f.subscribe(function (b) { b && b.hasForeignKey && ajaxcall({ url: a.apiUrl + "/ReportApi/GetLookupList", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, fieldId: b.fieldId } }).success(function (b) { ajaxcall({ type: "POST", url: a.lookupListUrl, data: JSON.stringify({ lookupSql: b.sql, connectKey: b.connectKey }) }).success(function (a) { a.d && (a = a.d), e(a) }) }) }), c.FieldId && f(b.FindField(c.FieldId)), b.Filters.push({ AndOr: ko.observable(d ? " AND " : c.AndOr), Field: f, Operator: ko.observable(c.Operator), Value: ko.observable(c.Value1), Value2: ko.observable(c.Value2), LookupList: e, Apply: ko.observable(null == c.Apply || c.Apply), IsFilterOnFly: d || !1 }) }, b.RemoveField = function (a) { bootbox.confirm("Are you sure you would like to remove this field?", function (c) { c && b.SelectedFields.remove(a) }) }, b.RemoveFilter = function (a) { bootbox.confirm("Are you sure you would like to remove this filter?", function (c) { c && b.Filters.remove(a) }) }, b.FindField = function (a) { return $.grep(b.SelectedFields(), function (b) { return b.fieldId == a })[0] }, b.SaveWithoutRun = function () { b.RunReport(!0) }, b.BuildReportData = function (a) { return a = a || [], { ReportID: b.ReportID(), ReportName: b.ReportName(), ReportDescription: b.ReportDescription(), FolderID: b.FolderID(), SelectedFieldIDs: $.map(b.SelectedFields(), function (a) { return a.fieldId }), Filters: $.map(b.Filters(), function (a, c) { var d = a.Apply() && a.IsFilterOnFly || !a.IsFilterOnFly ? { SavedReportId: b.ReportID(), FieldId: a.Field().fieldId, AndOr: a.AndOr(), Operator: a.Operator(), Value1: Array.isArray(a.Value()) && "in" == a.Operator() ? a.Value().join(",") : a.Value(), Value2: a.Value2() } : null; return null == d || d.Value1 || d.Value2 || (d = null), d }), IncludeSubTotals: b.IncludeSubTotal(), IsAggregateReport: !(a.length > 0) && b.AggregateReport(), ShowDataWithGraph: b.ShowDataWithGraph(), ShowOnDashboard: b.ShowOnDashboard(), SortBy: b.SortByField(), ReportType: b.ReportType(), GroupFunctionList: $.map(b.SelectedFields(), function (a) { return { FieldID: a.fieldId, GroupFunc: a.selectedAggregate(), FilterOnFly: a.filterOnFly() } }), DrillDownRow: a } }, b.RunReport = function (c) { if (c = !0 === c, !b.validateReport()) return void toastr.error("Please correct validation issues"); ajaxcall({ url: a.apiUrl + "/ReportApi/RunReport", type: "POST", data: JSON.stringify({ Account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, SaveReport: !!b.CanSaveReports() && b.SaveReport(), ReportJson: JSON.stringify(b.BuildReportData()) }) }).success(function (d) { b.ReportID(d.reportId), b.SaveReport() && (toastr.success("Report Saved"), c && b.LoadAllSavedReports()), c || ("execute" == b.ReportMode() ? b.ExecuteReportQuery(d.sql, d.connectKey) : redirectToReport(a.runReportUrl, { reportId: d.reportId, reportName: b.ReportName(), reportDescription: b.ReportDescription(), includeSubTotal: b.IncludeSubTotal(), aggregateReport: b.AggregateReport(), showDataWithGraph: b.ShowDataWithGraph(), reportSql: d.sql, connectKey: d.connectKey, reportFilter: JSON.stringify($.map(b.FlyFilters(), function (a) { return ko.toJS(a) })), reportType: b.ReportType(), selectedFolder: null != b.SelectedFolder() ? b.SelectedFolder().Id : 0 })) }) }, b.ExecuteReportQuery = function (c, d) { c && d && ajaxcall({ url: a.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: c, connectKey: d, reportType: b.ReportType(), pageNumber: b.pager.currentPage(), pageSize: b.pager.pageSize(), sortBy: b.pager.sortColumn() || "", desc: b.pager.sortDescending() || !1 }) }).success(function (e) { e.d && (e = e.d); var f = b.ReportResult(); f.HasError(e.HasError), f.Exception(e.Exception), f.Warnings(e.Warnings), f.ReportDebug(e.ReportDebug), f.ReportSql(e.ReportSql), e.ReportData.IsDrillDown = ko.observable(!1), $.each(e.ReportData.Rows, function (c, d) { d.DrillDownData = ko.observable(null), d.pager = new pagerViewModel({ pageSize: 10 }), d.sql = "", d.connectKey = "", d.changeSort = function (a) { return d.pager.changeSort(a), d.execute(), !1 }, d.isExpanded = ko.observable(!1), d.execute = function () { "" != d.sql && ajaxcall({ url: a.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: d.sql, connectKey: d.connectKey, reportType: "List", pageNumber: d.pager.currentPage(), pageSize: d.pager.pageSize(), sortBy: d.pager.sortColumn() || "", desc: d.pager.sortDescending() || !1 }) }).success(function (a) { a.d && (a = a.d), a.ReportData.IsDrillDown = ko.observable(!0), d.DrillDownData(a.ReportData), d.pager.totalRecords(a.Pager.TotalRecords), d.pager.pages(a.Pager.TotalPages) }) }, d.expand = function () { ajaxcall({ url: a.apiUrl + "/ReportApi/RunDrillDownReport", type: "POST", data: JSON.stringify({ Account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, SaveReport: !1, ReportJson: JSON.stringify(b.BuildReportData(d.Items)) }) }).success(function (a) { d.sql = a.sql, d.connectKey = a.connectKey, d.execute() }), d.isExpanded(!0) }, d.pager.currentPage.subscribe(function () { d.execute() }), d.collapse = function () { d.isExpanded(!1) }, d.toggle = function () { d.isExpanded() ? d.collapse() : d.expand() } }), f.ReportData(e.ReportData), b.pager.totalRecords(e.Pager.TotalRecords), b.pager.pages(e.Pager.TotalPages), b.currentSql(c), b.currentConnectKey(d), e.Warnings && toastr.info("Note: " + e.Warnings), b.isChart() && (google.charts.load("current", { packages: ["corechart"] }), google.charts.setOnLoadCallback(b.DrawChart)) }) }, b.DrawChart = function () { if (b.isChart()) { var a = b.ReportResult().ReportData(), c = new google.visualization.DataTable; $.each(a.Columns, function (a, b) { (0 == a || b.IsNumeric) && c.addColumn(b.IsNumeric ? "number" : "string", b.ColumnName) }); var d = []; $.each(a.Rows, function (a, b) { var c = []; $.each(b.Items, function (a, b) { (0 == a || b.Column.IsNumeric) && c.push(b.Column.IsNumeric ? parseInt(b.Value) : b.Value) }), d.push(c) }), c.addRows(d); var e = { title: b.ReportName() }, f = document.getElementById("chart_div"), g = null; "Pie" == b.ReportType() && (g = new google.visualization.PieChart(f)), "Bar" == b.ReportType() && (g = new google.visualization.ColumnChart(f)), "Line" == b.ReportType() && (g = new google.visualization.LineChart(f)), g.draw(c, e) } }, b.loadFolders = function (c) { ajaxcall({ url: a.apiUrl + "/ReportApi/GetFolders", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId } }).success(function (a) { if (b.Folders(a), b.SelectedFolder(null), c) { var d = $.grep(a, function (a) { return a.Id == c }); d.length > 0 && b.SelectedFolder(d[0]) } }) }, b.LoadReport = function (c, d) { return ajaxcall({ url: a.apiUrl + "/ReportApi/LoadReport", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, reportId: c } }).success(function (c) { function f() { $.each(c.Filters, function (a, c) { if (e.indexOf(c.FieldId) < 0) { var d = $.grep(b.SelectedFields(), function (a) { return 1 == a.filterOnFly() && a.fieldId == c.FieldId }); d && e.push(c.FieldId), b.AddFilter(c, d) } }) } b.ReportID(c.ReportID), b.ReportType(c.ReportType), b.ReportName(c.ReportName), b.ReportDescription(c.ReportDescription), b.FolderID(c.FolderID), $.each(c.SelectedFields, function (a, b) { b.selectedFieldName = b.tableName + " > " + b.fieldName, b.selectedAggregate = ko.observable(b.aggregateFunction), b.filterOnFly = ko.observable(b.filterOnFly) }), b.SelectedFields(c.SelectedFields), b.ChosenFields([]), b.SelectFields([]), b.SelectedField(null), b.IncludeSubTotal(c.IncludeSubTotals), b.AggregateReport(c.IsAggregateReport), b.ShowDataWithGraph(c.ShowDataWithGraph), b.ShowOnDashboard(c.ShowOnDashboard), b.SortByField(c.SortBy), b.Filters([]); var e = []; if (1 == d) { if (a.reportFilter && "[]" != a.reportFilter) { var g = JSON.parse(a.reportFilter); $.each(g, function (a, c) { e.indexOf(c.Field.fieldId) < 0 && (c.FieldId = c.Field.fieldId, c.Value1 = c.Value, e.push(c.FieldId), b.AddFilter(c, !0)) }) } f(), $.each($.grep(b.SelectedFields(), function (a) { return 1 == a.filterOnFly() && e.indexOf(a.fieldId) < 0 }), function (a, c) { b.AddFilter(null, !0), b.Filters()[b.Filters().length - 1].Field(c) }) } else f(); b.SaveReport(!d), "execute" == b.ReportMode() && b.ExecuteReportQuery(a.reportSql, a.reportConnect) }) }, b.LoadAllSavedReports = function () { ajaxcall({ url: a.apiUrl + "/ReportApi/GetSavedReports", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId } }).success(function (c) { $.each(c, function (c, d) { d.runMode = !1, d.openReport = function () { b.LoadReport(d.reportId).done(function () { d.runMode ? (b.SaveReport(!1), b.RunReport(), d.runMode = !1) : b.ReportMode("generate") }) }, d.runReport = function () { d.runMode = !0, d.openReport() }, d.deleteReport = function () { bootbox.confirm("Are you sure you would like to Delete this Report?", function (c) { c && ajaxcall({ url: a.apiUrl + "/ReportApi/DeleteReport", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId, reportId: d.reportId } }).success(function () { b.SavedReports.remove(d) }) }) }, a.reportId > 0 && d.reportId == a.reportId && (d.openReport(), a.reportWizard.modal("show")) }), b.SavedReports(c) }) }, b.LoadAllSavedReports(), ajaxcall({ url: a.apiUrl + "/ReportApi/CanSaveReports", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId } }).success(function (a) { a = a || { allowUsersToCreateReports: !0, allowUsersToManageFolders: !0 }, b.CanSaveReports(a.allowUsersToCreateReports), b.CanManageFolders(a.allowUsersToManageFolders) }), b.changeSort = function (a) { return b.pager.changeSort(a), b.ExecuteReportQuery(b.currentSql(), b.currentConnectKey()), !1 }, b.isInputValid = function (a) { return (null == $(a).attr("data-notempty") || 0 != $(a).children("option").length) && (a.validity ? a.validity.valid : null == $(a).attr("required") || "" != $(a).val()) }, b.validateReport = function () { if (null != a.reportWizard) { var c = a.reportWizard.find("input,select"), d = !0; $(".form-group").removeClass("has-error"); for (var e = 0; e < c.length; e++) b.isInputValid(c[e]) || (d = !1, $(c[e]).closest(".form-group").addClass("has-error")); return d } }, b.loadTables = function () { ajaxcall({ url: a.apiUrl + "/ReportApi/GetTables", data: { account: a.accountApiToken, dataConnect: a.dataconnectApiToken, clientId: a.clientId } }).success(function (a) { b.Tables(a) }) }, b.init = function (a) { b.loadFolders(a), b.loadTables() } };